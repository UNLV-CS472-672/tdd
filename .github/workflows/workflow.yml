name: CI workflow
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]  # Test on both Linux and Windows
        python-version: [3.8, 3.9, 3.10]  # Test on Python versions 3.8, 3.9, and 3.10

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout
        uses: actions/checkout@v3

      # Conditional step: Use a container for Linux runners, install Python directly for Windows
      - name: Set up Python
        if: runner.os == 'Linux'
        run: |
          # Use containerized Python on Linux runners
          docker pull python:${{ matrix.python-version }}-slim
          docker run -v ${{ github.workspace }}:/workspace python:${{ matrix.python-version }}-slim
        else:
          # Install Python natively on Windows runners
          uses: actions/setup-python@v4
          with:
            python-version: ${{ matrix.python-version }}

      # Step 2: Install dependencies
      - name: Install dependencies
        run: |
          # Upgrade pip and install dependencies from the requirements.txt file
          python -m pip install --upgrade pip --trusted-host pypi.org --trusted-host files.pythonhosted.org
          pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org -r requirements.txt

      # Step 3: Lint code using flake8
      - name: Lint with flake8
        run: |
          flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src --count --max-complexity=10 --max-line-length=127 --statistics

      # Step 4: Run unit tests using pytest
      - name: Run unit tests with pytest
        run: |
          pytest -v --tb=short --color=yes --cov=src --cov-report=term-missing

      # Step 5: Generate and save a coverage report
      - name: Generate coverage report
        run: |
          pytest -v --tb=short --color=yes --cov=src --cov-report=xml

      # Step 6: Upload coverage report to Coveralls
      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # Step 7: Run static code security analysis with Bandit
      - name: Run security analysis with Bandit
        run: |
          bandit -r src/

      # Step 8: Perform code quality analysis with SonarQube
      - name: SonarQube Scan
        run: |
          sonar-scanner \
          -Dsonar.projectKey=your_project_key \
          -Dsonar.sources=src \
          -Dsonar.host.url=http://sonarqube-server:9000 \
          -Dsonar.login=$SONARQUBE_TOKEN

      # Step 9: Perform security scan of the Python image with Trivy (only on Linux)
      - name: Security Scan with Trivy
        if: runner.os == 'Linux'  # Only run on Linux
        run: |
          trivy image python:${{ matrix.python-version }}-slim
